<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.5.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-07-25T09:36:47-05:00</updated><id>http://localhost:4000/</id><title type="html">Stubborn Programmer</title><subtitle>Simple explanations one post at a time
</subtitle><author><name>Zeshan Anwar</name></author><entry><title type="html">Covariance vs Contravariance and Invariance</title><link href="http://localhost:4000/2018/07/25/covariance-vs-contravariance-and-invariance.html" rel="alternate" type="text/html" title="Covariance vs Contravariance and Invariance" /><published>2018-07-25T09:36:00-05:00</published><updated>2018-07-25T09:36:00-05:00</updated><id>http://localhost:4000/2018/07/25/covariance-vs-contravariance-and-invariance</id><content type="html" xml:base="http://localhost:4000/2018/07/25/covariance-vs-contravariance-and-invariance.html"></content><author><name>Zeshan Anwar</name></author><summary type="html"></summary></entry><entry><title type="html">Stackable Traits in Scala</title><link href="http://localhost:4000/books/scala/chapter/2018/02/26/Stackable-Traits.html" rel="alternate" type="text/html" title="Stackable Traits in Scala" /><published>2018-02-26T20:45:45-06:00</published><updated>2018-02-26T20:45:45-06:00</updated><id>http://localhost:4000/books/scala/chapter/2018/02/26/Stackable-Traits</id><content type="html" xml:base="http://localhost:4000/books/scala/chapter/2018/02/26/Stackable-Traits.html">&lt;p&gt;A. Defining variables
Scala has two kinds of variables, &lt;code class=&quot;highlighter-rouge&quot;&gt;val&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;. A &lt;code class=&quot;highlighter-rouge&quot;&gt;val&lt;/code&gt; is similar to a final variable
in java: once assigned, it cannot be reassigned. A &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt; on the other hand, can be.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello, my name is Scala&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// msg: String - type inferred&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;msg2:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hi!&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// type explicitly given&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;// reassignment&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;New message&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// will give an error&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;msg2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Bye Bye&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;B. Defining functions&lt;/p&gt;

&lt;p&gt;Let write a simple min function in Scala&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;x:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;y:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;A few things to note here:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Functions start with &lt;code class=&quot;highlighter-rouge&quot;&gt;def&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Function name is followed by comma-seperated list of parameters&lt;/li&gt;
  &lt;li&gt;A type must follow every parameter (x: Int)&lt;/li&gt;
  &lt;li&gt;The result type follow the parameter, after the closing parenthesis (list : Int)&lt;/li&gt;
  &lt;li&gt;There exists an equal sign (=) before function body&lt;/li&gt;
  &lt;li&gt;The last variable is what is returned, (either x or y)&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Zeshan Anwar</name></author><summary type="html">A. Defining variables Scala has two kinds of variables, val and var. A val is similar to a final variable in java: once assigned, it cannot be reassigned. A var on the other hand, can be.</summary></entry><entry><title type="html">First Steps in Scala</title><link href="http://localhost:4000/books/scala/chapter/2018/02/26/Scala-10.html" rel="alternate" type="text/html" title="First Steps in Scala" /><published>2018-02-26T20:45:45-06:00</published><updated>2018-02-26T20:45:45-06:00</updated><id>http://localhost:4000/books/scala/chapter/2018/02/26/Scala-10</id><content type="html" xml:base="http://localhost:4000/books/scala/chapter/2018/02/26/Scala-10.html">&lt;p&gt;A. Defining variables
Scala has two kinds of variables, &lt;code class=&quot;highlighter-rouge&quot;&gt;val&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;. A &lt;code class=&quot;highlighter-rouge&quot;&gt;val&lt;/code&gt; is similar to a final variable
in java: once assigned, it cannot be reassigned. A &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt; on the other hand, can be.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello, my name is Scala&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// msg: String - type inferred&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;msg2:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hi!&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// type explicitly given&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;// reassignment&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;New message&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// will give an error&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;msg2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Bye Bye&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;B. Defining functions&lt;/p&gt;

&lt;p&gt;Let write a simple min function in Scala&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;x:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;y:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;A few things to note here:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Functions start with &lt;code class=&quot;highlighter-rouge&quot;&gt;def&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Function name is followed by comma-seperated list of parameters&lt;/li&gt;
  &lt;li&gt;A type must follow every parameter (x: Int)&lt;/li&gt;
  &lt;li&gt;The result type follow the parameter, after the closing parenthesis (list : Int)&lt;/li&gt;
  &lt;li&gt;There exists an equal sign (=) before function body&lt;/li&gt;
  &lt;li&gt;The last variable is what is returned, (either x or y)&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Zeshan Anwar</name></author><summary type="html">A. Defining variables Scala has two kinds of variables, val and var. A val is similar to a final variable in java: once assigned, it cannot be reassigned. A var on the other hand, can be.</summary></entry><entry><title type="html">A Scalable Language</title><link href="http://localhost:4000/books/scala/chapter/2018/02/22/Scala-1.html" rel="alternate" type="text/html" title="A Scalable Language" /><published>2018-02-22T20:45:45-06:00</published><updated>2018-02-22T20:45:45-06:00</updated><id>http://localhost:4000/books/scala/chapter/2018/02/22/Scala-1</id><content type="html" xml:base="http://localhost:4000/books/scala/chapter/2018/02/22/Scala-1.html">&lt;p&gt;For years I’ve been meaning to get learn Scala and get familiar with functional programming but never really had the right motivation.
Recently, I undertook a technically challenging project at work and it is all written in Scala.&lt;/p&gt;

&lt;p&gt;These series of blog posts will aim to change that.&lt;/p&gt;

&lt;p&gt;Known as a ‘scala-ble language’, Scala is meant to grow with the needs of the developer.
In short, Scala is a blend of OO and functional programming concepts in a statically typed language.&lt;/p&gt;

&lt;p&gt;What does Scala offer?&lt;/p&gt;

&lt;p&gt;A. Scala is pure OO
OO gives complex ideas structure and a nice layer of abstraction. Scala is OO in its purest form, whereby every value is an object and every operation is a method call. Thus, even something as trivial as adding two numbers
together is purely OO. Java on the other hand, pollutes its OO structure with primitive types and their associated operations.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// in-fix notation&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.+(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// in pure form&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;B. Scala is also a complete functional language
Scala is also a full-blown functional language. This means two things:
A. Functions are values of the same status as say Integers or Strings, and so you can store a function in a variable, return functions from methods, pass functions in as arguments
B. Immutability by default&lt;/p&gt;

&lt;p&gt;C. Scala in concise
You can omit much of the verbose syntax of Java in Scala. This improves readability of code.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Java&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// etters&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// getters&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// hashcode&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// equals&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Scala&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;number:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;D. Scala is compatible - Scala compiles to JVM bytecode
E. Scala is high-level - Functional Programming
F. Scala is statically-typed
This may seem trivial but gives us huge benefits: Verifiable properties, Safe refactoring and inline documentation. Remember, the best comments are the ones that are never written.&lt;/p&gt;</content><author><name>Zeshan Anwar</name></author><summary type="html">For years I’ve been meaning to get learn Scala and get familiar with functional programming but never really had the right motivation. Recently, I undertook a technically challenging project at work and it is all written in Scala.</summary></entry><entry><title type="html">Books</title><link href="http://localhost:4000/books/productivity/growth/2018/02/17/Books.html" rel="alternate" type="text/html" title="Books" /><published>2018-02-17T06:45:45-06:00</published><updated>2018-02-17T06:45:45-06:00</updated><id>http://localhost:4000/books/productivity/growth/2018/02/17/Books</id><content type="html" xml:base="http://localhost:4000/books/productivity/growth/2018/02/17/Books.html">&lt;p&gt;I have a ton of books; most of which are left un&lt;/p&gt;

&lt;p&gt;Over the course of my career, I’ve bought a ton of books that have
accumulated dust over the months. I’m a sucker for the physical medium - there
is nothing quite like flipping a page, or writing
notes directly on the paper. I also seem to learn better when reading from paper.
I think over the years I’ve becomes so skeptical of what I read on a screen that
seeing something on paper gives it some additional credibility.&lt;/p&gt;

&lt;p&gt;Sometimes, if I’m struggling with a particularly hairy piece of code, I will print
it out and work through it on paper. Most times, the convoluted logic seems not as
convoluted. I also find it much more relaxing, and always
come away with a deeper understanding of the code.&lt;/p&gt;

&lt;p&gt;As a programmer, most of my day is spent looking at a screen. The change to
paper is always something I look forward to and this gives my eyes some much needed rest.&lt;/p&gt;

&lt;p&gt;So back to the problem at hand: I have several unread books on my shelf that I want to
read but haven’t had the chance to.&lt;/p&gt;

&lt;p&gt;Thus, I have started an initiative whereby I will read a chapter a day and summarize
it in a blog post here. The cadence may change a little bit but one chapter
doesn’t seem to difficult.&lt;/p&gt;</content><author><name>Zeshan Anwar</name></author><summary type="html">I have a ton of books; most of which are left un</summary></entry><entry><title type="html">Problem: Construct the array</title><link href="http://localhost:4000/2017/12/14/problem-construct-the-array.html" rel="alternate" type="text/html" title="Problem: Construct the array" /><published>2017-12-14T11:58:00-06:00</published><updated>2017-12-14T11:58:00-06:00</updated><id>http://localhost:4000/2017/12/14/problem-construct-the-array</id><content type="html" xml:base="http://localhost:4000/2017/12/14/problem-construct-the-array.html">&lt;p&gt;https://www.hackerrank.com/contests/101hack52/challenges/construct-the-array3sxxdz&lt;/p&gt;</content><author><name>Zeshan Anwar</name></author><summary type="html">https://www.hackerrank.com/contests/101hack52/challenges/construct-the-array3sxxdz</summary></entry><entry><title type="html">The four musketeers - The cat-mouse game and lesson learned</title><link href="http://localhost:4000/2017/12/11/Bearstacks.html" rel="alternate" type="text/html" title="The four musketeers - The cat-mouse game and lesson learned" /><published>2017-12-11T00:00:00-06:00</published><updated>2017-12-11T00:00:00-06:00</updated><id>http://localhost:4000/2017/12/11/Bearstacks</id><content type="html" xml:base="http://localhost:4000/2017/12/11/Bearstacks.html">&lt;p&gt;In early 2015, my brother and our two best friends (who are also brothers) decide to start an app-development agency. We name it &lt;code class=&quot;highlighter-rouge&quot;&gt;BearStacks Development&lt;/code&gt;. All of us are in school at the time, and ‘Co-founder’ seems like a good thing to put on our resumes. After we barely cover the $99 developer fee; we decide to brainstorm for ideas. Much like all first-time app developers, we decide on a game.&lt;/p&gt;

&lt;p&gt;We name it Memory Swipe.  It was my brothers idea: show a pattern on the screen and ask the player to mimic it. If the redrawing was close enough, the player would progress to a harder level. The game was designed with no end so a player could potentially play forever.&lt;/p&gt;

&lt;p&gt;Now this development took place over a few semesters - in-between lectures, assignments, midterms and exams. One fateful morning, before our 8:30am classes (damn Waterloo) one of us mindlessly searches for the name “Memory Swipe” in the app store. And there pops up our app with our logo, icon, pictures and name. Everything was exactly as we had designed it.&lt;/p&gt;

&lt;p&gt;There was one slight problem though - none of us had uploaded it to the App store. Apple has a pretty involved app submission process and its not something you can accidently fat-finger from your IDE. Initially we all think that one of us from the team went ahead and started the process but in about 15 mins it became pretty clear that someone had stolen our code.&lt;/p&gt;

&lt;p&gt;During this time, being first-time iOS developers, we thought it ‘wise’ to push to a public repo on GitHub. Who would steal our crappy code, we thought. We didn’t wanna pay for a private repo. That was our only mistake.&lt;/p&gt;

&lt;p&gt;We check the dates, and the game has been on the app store for about a month now. It also has one update - &lt;code class=&quot;highlighter-rouge&quot;&gt;V1.1 Some bug fix&lt;/code&gt;. That update was the icing on the cake; whoever was stealing our code was also keeping it up to date will all our recent updates to the repo. They had the audacity to include the message &lt;code class=&quot;highlighter-rouge&quot;&gt;Some bug fix&lt;/code&gt; without having an inlking on what was fixed. As a matter of fact, if I remember correctly, we had added a feature in that delta.&lt;/p&gt;

&lt;p&gt;After fuming for a few hours, we decide to investigate who this was.&lt;/p&gt;

&lt;p&gt;We check our GitHub repo to see who else has forked our code. We realize that several people have forked our code but none of them seemed like our thief. Some of them didn’t have Apple developer accounts in the same name, and the ones that did, didn’t have our app posted.&lt;/p&gt;

&lt;p&gt;After some further investigation, and some digging through the web, we chance upon the the culprit. A developer account linked to somebody half-way around the world.&lt;/p&gt;

&lt;p&gt;Our &lt;code class=&quot;highlighter-rouge&quot;&gt;thief&lt;/code&gt; has hundreds of well-designed iOS apps to their name. Their apps look completely legit with reviews and comments. They had a phone number, address and different ways to contact them. To anyone else, this was a perfectly&lt;/p&gt;

&lt;p&gt;We send emails to that person to take down the app, and even have the courage to call them. (Google Call)&lt;/p&gt;

&lt;p&gt;We received emails back in a foreign language which we literally put into google translate to figure out what was being said. Initially they were denying everything and wanted us to show proof. We were pretty distraught at this point since it’s really hard to prove&lt;/p&gt;

&lt;p&gt;We thought we could scare them by saying we’d sue them and what-not. Tell Apple etc. etc. tell-tale&lt;/p&gt;

&lt;p&gt;When looking at the code again we realized one simple fact - &lt;code class=&quot;highlighter-rouge&quot;&gt;Xcode&lt;/code&gt; puts a default copyright header at the top of every file with the name of the developer and the year. We immediately send back an email detailing that EVERY SINGLE FILE has a copyright header with one of our four names. This really scares them, and we don’t hear back for a few weeks.&lt;/p&gt;

&lt;p&gt;We get in touch with Apple, and after&lt;/p&gt;

&lt;p&gt;In the meantime, we hastily submit our app for review and it gets rejected for having the word ‘Memory’. Apparently that word is copyright in many countries as it clashes with a board game. We remove the space (MemorySwipe) and put it up for review again. This time it fails because matches someone elses code - our thiefs. We complain to apple, mention the Copyright headers, and after a month they take down our thiefs app.&lt;/p&gt;

&lt;p&gt;But by this time several other ones have also sprung up on the app store; some with a slightly different name but same icon, some with a different icon. Our app also gets accepted and is thrown into the mix.&lt;/p&gt;

&lt;p&gt;We didn’t have the energy to now go after everybody else as well, and so we were pretty&lt;/p&gt;

&lt;p&gt;Lessons learned:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Never push private code to a public repo, no matter how insignificant - if you accidently push a password or key to public repo, you assume its been compromised.&lt;/li&gt;
  &lt;li&gt;You never know when those annoying copyright headers may come in handy&lt;/li&gt;
  &lt;li&gt;Don’t cheap out over security or anonymity&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Zeshan Anwar</name></author><summary type="html">In early 2015, my brother and our two best friends (who are also brothers) decide to start an app-development agency. We name it BearStacks Development. All of us are in school at the time, and ‘Co-founder’ seems like a good thing to put on our resumes. After we barely cover the $99 developer fee; we decide to brainstorm for ideas. Much like all first-time app developers, we decide on a game.</summary></entry><entry><title type="html">On the edge!</title><link href="http://localhost:4000/2017/12/09/On-the-edge.html" rel="alternate" type="text/html" title="On the edge!" /><published>2017-12-09T12:47:00-06:00</published><updated>2017-12-09T12:47:00-06:00</updated><id>http://localhost:4000/2017/12/09/On-the-edge</id><content type="html" xml:base="http://localhost:4000/2017/12/09/On-the-edge.html">&lt;p&gt;In another blog &lt;a href=&quot;https://mzanwar.github.io/2017/09/05/comparator-confusion.html&quot;&gt;post&lt;/a&gt; we talked about the&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Comparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ascending&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Comparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;descending&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ascending&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// {1, 2, 4, 5, 9}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;descending&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// {9, 5, 4, 2, 1}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;what-if-the-values-of-approach-minvalue-and-maxvalue&quot;&gt;What if the values of approach MIN.VALUE and MAX.VALUE?&lt;/h3&gt;
&lt;p&gt;How do we compare longs, floats, BigIntegers etc&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a-b&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;b-a&lt;/code&gt; is a terrible hack.&lt;/p&gt;

&lt;p&gt;Its a bad abstraction and the worst case of someone being too clever.&lt;/p&gt;

&lt;p&gt;As is the case with clever solutions, they catch on and permeate throughout the web. People are inexplicably drawn to these solutions.&lt;/p&gt;

&lt;p&gt;You will find several accepted solution on StackOverflow implementing the comparator as a - b. This will work in 98% of scenarios, but why implement a flawed solution to begin with. The 2% of the time it does fail will be extremely hard to debug.&lt;/p&gt;</content><author><name>Zeshan Anwar</name></author><summary type="html">In another blog post we talked about the</summary></entry><entry><title type="html">Java - Super or Extends: Collections copy Method</title><link href="http://localhost:4000/2017/09/11/java-super-or-extends-collections-copy-method.html" rel="alternate" type="text/html" title="Java - Super or Extends: Collections copy Method" /><published>2017-09-11T10:16:34-05:00</published><updated>2017-09-11T10:16:34-05:00</updated><id>http://localhost:4000/2017/09/11/java--super-or-extends-collections-copy-method</id><content type="html" xml:base="http://localhost:4000/2017/09/11/java-super-or-extends-collections-copy-method.html">&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;srcSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;srcSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IndexOutOfBoundsException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Source does not fit in dest&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;srcSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;COPY_THRESHOLD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RandomAccess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RandomAccess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;srcSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ListIterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;di&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;listIterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ListIterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;si&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;listIterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;srcSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;di&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;di&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;si&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name>Zeshan Anwar</name></author><summary type="html">```java public static void copy(List&amp;lt;? super T&amp;gt; dest, List&amp;lt;? extends T&amp;gt; src) { int srcSize = src.size(); if (srcSize &amp;gt; dest.size()) throw new IndexOutOfBoundsException(&quot;Source does not fit in dest&quot;);</summary></entry><entry><title type="html">Enough sed!</title><link href="http://localhost:4000/2017/09/07/sed.html" rel="alternate" type="text/html" title="Enough sed!" /><published>2017-09-07T21:20:56-05:00</published><updated>2017-09-07T21:20:56-05:00</updated><id>http://localhost:4000/2017/09/07/sed</id><content type="html" xml:base="http://localhost:4000/2017/09/07/sed.html">&lt;p&gt;Late one night I needed to shove several thousand &lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt; documents into my local Elasticsearch cluster. I was setting up a demo for work and why I had left the most demo-worthy part of it till the end, I don’t know. Nevertheless, I was able to accomplish that with just two lines of bash! Lets take a look here:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;c&quot;&gt;# A.&lt;/span&gt;
sed &lt;span class=&quot;s1&quot;&gt;'s/^/{ &quot;index&quot; : {} }\
/'&lt;/span&gt; jsonFile &amp;gt; bulkReady.json

&lt;span class=&quot;c&quot;&gt;# B.&lt;/span&gt;
curl -s -XPOST http://localhost:9200/index/type/_bulk --data-binary @bulkReady.json&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;explanation&quot;&gt;Explanation:&lt;/h3&gt;

&lt;p&gt;Time to break this down! My file had a bunch of json documents, i.e.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;document&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;one&quot;&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;document&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;two&quot;&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;document&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;three&quot;&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;document&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;four&quot;&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
.
.
.

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I needed a way to index all of these into my node Elasticsearch node. I knew Elasticsearch offered a basic &lt;code class=&quot;highlighter-rouge&quot;&gt;Index API&lt;/code&gt; which would solve my problem, but I’d have to send each document one by one.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# First document&lt;/span&gt;
curl -XPUT &lt;span class=&quot;s1&quot;&gt;'localhost:9200/index/type/1?pretty'&lt;/span&gt; -H &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; -d&lt;span class=&quot;s1&quot;&gt;'
{
&quot;document&quot;: &quot;one&quot;
&quot;title&quot;:{}
}
'&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Second document&lt;/span&gt;
curl -XPUT &lt;span class=&quot;s1&quot;&gt;'localhost:9200/index/type/1?pretty'&lt;/span&gt; -H &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; -d&lt;span class=&quot;s1&quot;&gt;'
{
&quot;document&quot;: &quot;two&quot;
&quot;title&quot;:{}
}
'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;I thought I’d put together a simple bash script that would run through my documents and &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; them to my ES node. But, I knew there had to be a better way. I had heard about the &lt;code class=&quot;highlighter-rouge&quot;&gt;Bulk API&lt;/code&gt; interface that ES offered but I hadn’t had a chance to use it - until now.&lt;/p&gt;

&lt;p&gt;After looking into the &lt;code class=&quot;highlighter-rouge&quot;&gt;Bulk API&lt;/code&gt; interface, I realized that it was actually pretty simple to use. I could simple use the command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -s -XPOST http://localhost:9200/_bulk --data-binary @bulkReady.json
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;But my &lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt; file needed to be in a special format! Every json document needed to have a some metadata associated with it. So I needed to massage my file into something like this:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;index&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;_index&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;_type&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;type1&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;_id&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Since I already knew the index and type of my documents, I could remove them from the metadata. I also wanted Elasticsearch to automatically assign an id. Thus, I needed a document looking like thus:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;index&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;document&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;one&quot;&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;index&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;document&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;two&quot;&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;index&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;document&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;three&quot;&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;index&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;document&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;four&quot;&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I was back to where I started. Damn, I was so close but now I’ll need to add some metadata to each document anyways so why not just use my initial approach of writing that bash script. That is when I discovered the substitution capability of &lt;code class=&quot;highlighter-rouge&quot;&gt;sed&lt;/code&gt;; an extremely powerful command line Stream EDitor.&lt;/p&gt;

&lt;h3 id=&quot;sed-substitution&quot;&gt;sed substitution&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c&quot;&gt;# sed processes each line of a file and applies some substitution if it matches a regex&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# the syntax is sed 's/regex/replacement/'&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# s - substitution&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# / are delimiters - you need three after s/a/b/ - replaces a with b&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;sunday | sed &lt;span class=&quot;s1&quot;&gt;'s/day/night/'&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# =&amp;gt; sunnight&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;Monday Sunday | sed &lt;span class=&quot;s1&quot;&gt;'s/day/night/'&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# =&amp;gt; Monnight Sunday - only processes first match&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;Monday Sunday | sed &lt;span class=&quot;s1&quot;&gt;'s/day/night/g'&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# =&amp;gt; Monnight Sunnight - a g parameter at the end tell sed to act globally&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is all I needed to solve my bulk format problem. I needed to add some metadata before every document. &lt;code class=&quot;highlighter-rouge&quot;&gt;^&lt;/code&gt; is regex for start of the line. I had some problems adding a new line because \n does not seem to work on my &lt;a href=&quot;http://sed.sourceforge.net/sedfaq4.html&quot;&gt;version&lt;/a&gt; of sed. I had to actually add a physical new line to get it to work.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sed &lt;span class=&quot;s1&quot;&gt;'s/^/{ &quot;index&quot; : {} }\
/'&lt;/span&gt; jsonFile &amp;gt; bulkReady.json
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Once I had my file in the correct format, one simple curl was all I needed:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -s -XPOST http://localhost:9200/index/type/_bulk --data-binary @bulkReady.json
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And that is how I was able to upload several thousand json docs in two lines. Makes me wonder how much more productive I’d be if had command of the command line!&lt;/p&gt;</content><author><name>Zeshan Anwar</name></author><summary type="html">Late one night I needed to shove several thousand json documents into my local Elasticsearch cluster. I was setting up a demo for work and why I had left the most demo-worthy part of it till the end, I don’t know. Nevertheless, I was able to accomplish that with just two lines of bash! Lets take a look here:</summary></entry></feed>