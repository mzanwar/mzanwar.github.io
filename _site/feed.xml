<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.5.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-12-14T22:53:34-06:00</updated><id>http://localhost:4000/</id><title type="html">Simpleton</title><subtitle>Simple explanations one post at a time
</subtitle><author><name>Zeshan Anwar</name></author><entry><title type="html">Problem: Construct the array</title><link href="http://localhost:4000/2017/12/14/problem-construct-the-array.html" rel="alternate" type="text/html" title="Problem: Construct the array" /><published>2017-12-14T11:58:00-06:00</published><updated>2017-12-14T11:58:00-06:00</updated><id>http://localhost:4000/2017/12/14/problem-construct-the-array</id><content type="html" xml:base="http://localhost:4000/2017/12/14/problem-construct-the-array.html">&lt;p&gt;https://www.hackerrank.com/contests/101hack52/challenges/construct-the-array&lt;/p&gt;</content><author><name>Zeshan Anwar</name></author><summary type="html">https://www.hackerrank.com/contests/101hack52/challenges/construct-the-array</summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/post/jekyll/update/2017/12/14/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2017-12-14T11:53:59-06:00</published><updated>2017-12-14T11:53:59-06:00</updated><id>http://localhost:4000/post/jekyll/update/2017/12/14/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/post/jekyll/update/2017/12/14/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name>Zeshan Anwar</name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry><entry><title type="html">The four musketeers - The cat-mouse game and lesson learned</title><link href="http://localhost:4000/2017/12/11/Bearstacks.html" rel="alternate" type="text/html" title="The four musketeers - The cat-mouse game and lesson learned" /><published>2017-12-11T00:00:00-06:00</published><updated>2017-12-11T00:00:00-06:00</updated><id>http://localhost:4000/2017/12/11/Bearstacks</id><content type="html" xml:base="http://localhost:4000/2017/12/11/Bearstacks.html">&lt;p&gt;In early 2015, my brother and our two best friends (who are also brothers) decide to start an app-development agency. We name it &lt;code class=&quot;highlighter-rouge&quot;&gt;BearStacks Development&lt;/code&gt;. All of us are in school at the time, and ‘Co-founder’ seems like a good thing to put on our resumes. After we barely cover the $99 developer fee; we decide to brainstorm for ideas. Much like all first-time app developers, we decide on a game.&lt;/p&gt;

&lt;p&gt;We name it Memory Swipe.  It was my brothers idea: show a pattern on the screen and ask the player to mimic it. If the redrawing was close enough, the player would progress to a harder level. The game was designed with no end so a player could potentially play forever.&lt;/p&gt;

&lt;p&gt;Now this development took place over a few semesters - in-between lectures, assignments, midterms and exams. One fateful morning, before our 8:30am classes (damn Waterloo) one of us mindlessly searches for the name “Memory Swipe” in the app store. And there pops up our app with our logo, icon, pictures and name. Everything was exactly as we had designed it.&lt;/p&gt;

&lt;p&gt;There was one slight problem though - none of us had uploaded it to the App store. Apple has a pretty involved app submission process and its not something you can accidently fat-finger from your IDE. Initially we all think that one of us from the team went ahead and started the process but in about 15 mins it became pretty clear that someone had stolen our code.&lt;/p&gt;

&lt;p&gt;During this time, being first-time iOS developers, we thought it ‘wise’ to push to a public repo on GitHub. Who would steal our crappy code, we thought. We didn’t wanna pay for a private repo. That was our only mistake.&lt;/p&gt;

&lt;p&gt;We check the dates, and the game has been on the app store for about a month now. It also has one update - &lt;code class=&quot;highlighter-rouge&quot;&gt;V1.1 Some bug fix&lt;/code&gt;. That update was the icing on the cake; whoever was stealing our code was also keeping it up to date will all our recent updates to the repo. They had the audacity to include the message &lt;code class=&quot;highlighter-rouge&quot;&gt;Some bug fix&lt;/code&gt; without having an inlking on what was fixed. As a matter of fact, if I remember correctly, we had added a feature in that delta.&lt;/p&gt;

&lt;p&gt;After fuming for a few hours, we decide to investigate who this was.&lt;/p&gt;

&lt;p&gt;We check our GitHub repo to see who else has forked our code. We realize that several people have forked our code but none of them seemed like our thief. Some of them didn’t have Apple developer accounts in the same name, and the ones that did, didn’t have our app posted.&lt;/p&gt;

&lt;p&gt;After some further investigation, and some digging through the web, we chance upon the the culprit. A developer account linked to somebody half-way around the world.&lt;/p&gt;

&lt;p&gt;Our &lt;code class=&quot;highlighter-rouge&quot;&gt;thief&lt;/code&gt; has hundreds of well-designed iOS apps to their name. Their apps look completely legit with reviews and comments. They had a phone number, address and different ways to contact them. To anyone else, this was a perfectly&lt;/p&gt;

&lt;p&gt;We send emails to that person to take down the app, and even have the courage to call them. (Google Call)&lt;/p&gt;

&lt;p&gt;We received emails back in a foreign language which we literally put into google translate to figure out what was being said. Initially they were denying everything and wanted us to show proof. We were pretty distraught at this point since it’s really hard to prove&lt;/p&gt;

&lt;p&gt;We thought we could scare them by saying we’d sue them and what-not. Tell Apple etc. etc. tell-tale&lt;/p&gt;

&lt;p&gt;When looking at the code again we realized one simple fact - &lt;code class=&quot;highlighter-rouge&quot;&gt;Xcode&lt;/code&gt; puts a default copyright header at the top of every file with the name of the developer and the year. We immediately send back an email detailing that EVERY SINGLE FILE has a copyright header with one of our four names. This really scares them, and we don’t hear back for a few weeks.&lt;/p&gt;

&lt;p&gt;We get in touch with Apple, and after&lt;/p&gt;

&lt;p&gt;In the meantime, we hastily submit our app for review and it gets rejected for having the word ‘Memory’. Apparently that word is copyright in many countries as it clashes with a board game. We remove the space (MemorySwipe) and put it up for review again. This time it fails because matches someone elses code - our thiefs. We complain to apple, mention the Copyright headers, and after a month they take down our thiefs app.&lt;/p&gt;

&lt;p&gt;But by this time several other ones have also sprung up on the app store; some with a slightly different name but same icon, some with a different icon. Our app also gets accepted and is thrown into the mix.&lt;/p&gt;

&lt;p&gt;We didn’t have the energy to now go after everybody else as well, and so we were pretty&lt;/p&gt;

&lt;p&gt;Lessons learned:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Never push private code to a public repo, no matter how insignificant - if you accidently push a password or key to public repo, you assume its been compromised.&lt;/li&gt;
  &lt;li&gt;You never know when those annoying copyright headers may come in handy&lt;/li&gt;
  &lt;li&gt;Don’t cheap out over security or anonymity&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Zeshan Anwar</name></author><summary type="html">In early 2015, my brother and our two best friends (who are also brothers) decide to start an app-development agency. We name it BearStacks Development. All of us are in school at the time, and ‘Co-founder’ seems like a good thing to put on our resumes. After we barely cover the $99 developer fee; we decide to brainstorm for ideas. Much like all first-time app developers, we decide on a game.</summary></entry><entry><title type="html">On the edge!</title><link href="http://localhost:4000/2017/12/09/On-the-edge.html" rel="alternate" type="text/html" title="On the edge!" /><published>2017-12-09T12:47:00-06:00</published><updated>2017-12-09T12:47:00-06:00</updated><id>http://localhost:4000/2017/12/09/On-the-edge</id><content type="html" xml:base="http://localhost:4000/2017/12/09/On-the-edge.html">&lt;p&gt;In another blog &lt;a href=&quot;https://mzanwar.github.io/2017/09/05/comparator-confusion.html&quot;&gt;post&lt;/a&gt; we talked about the&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Comparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ascending&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Comparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;descending&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ascending&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// {1, 2, 4, 5, 9}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;descending&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// {9, 5, 4, 2, 1}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;what-if-the-values-of-approach-minvalue-and-maxvalue&quot;&gt;What if the values of approach MIN.VALUE and MAX.VALUE?&lt;/h3&gt;
&lt;p&gt;How do we compare longs, floats, BigIntegers etc&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a-b&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;b-a&lt;/code&gt; is a terrible hack.&lt;/p&gt;

&lt;p&gt;Its a bad abstraction and the worst case of someone being too clever.&lt;/p&gt;

&lt;p&gt;As is the case with clever solutions, they catch on and permeate throughout the web. People are inexplicably drawn to these solutions.&lt;/p&gt;

&lt;p&gt;You will find several accepted solution on StackOverflow implementing the comparator as a - b. This will work in 98% of scenarios, but why implement a flawed solution to begin with. The 2% of the time it does fail will be extremely hard to debug.&lt;/p&gt;</content><author><name>Zeshan Anwar</name></author><summary type="html">In another blog post we talked about the</summary></entry><entry><title type="html">Java - Super or Extends: Collections copy Method</title><link href="http://localhost:4000/2017/09/11/java-super-or-extends-collections-copy-method.html" rel="alternate" type="text/html" title="Java - Super or Extends: Collections copy Method" /><published>2017-09-11T10:16:34-05:00</published><updated>2017-09-11T10:16:34-05:00</updated><id>http://localhost:4000/2017/09/11/java--super-or-extends-collections-copy-method</id><content type="html" xml:base="http://localhost:4000/2017/09/11/java-super-or-extends-collections-copy-method.html">&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;srcSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;srcSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IndexOutOfBoundsException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Source does not fit in dest&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;srcSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;COPY_THRESHOLD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RandomAccess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RandomAccess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;srcSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ListIterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;di&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;listIterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ListIterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;si&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;listIterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;srcSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;di&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;di&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;si&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name>Zeshan Anwar</name></author><summary type="html">```java public static void copy(List&amp;lt;? super T&amp;gt; dest, List&amp;lt;? extends T&amp;gt; src) { int srcSize = src.size(); if (srcSize &amp;gt; dest.size()) throw new IndexOutOfBoundsException(&quot;Source does not fit in dest&quot;);</summary></entry><entry><title type="html">Enough sed!</title><link href="http://localhost:4000/2017/09/07/sed.html" rel="alternate" type="text/html" title="Enough sed!" /><published>2017-09-07T21:20:56-05:00</published><updated>2017-09-07T21:20:56-05:00</updated><id>http://localhost:4000/2017/09/07/sed</id><content type="html" xml:base="http://localhost:4000/2017/09/07/sed.html">&lt;p&gt;Late one night I needed to shove several thousand &lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt; documents into my local Elasticsearch cluster. I was setting up a demo for work and why I had left the most demo-worthy part of it till the end, I don’t know. Nevertheless, I was able to accomplish that with just two lines of bash! Lets take a look here:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;c&quot;&gt;# A.&lt;/span&gt;
sed &lt;span class=&quot;s1&quot;&gt;'s/^/{ &quot;index&quot; : {} }\
/'&lt;/span&gt; jsonFile &amp;gt; bulkReady.json

&lt;span class=&quot;c&quot;&gt;# B.&lt;/span&gt;
curl -s -XPOST http://localhost:9200/index/type/_bulk --data-binary @bulkReady.json&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;explanation&quot;&gt;Explanation:&lt;/h3&gt;

&lt;p&gt;Time to break this down! My file had a bunch of json documents, i.e.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;document&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;one&quot;&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;document&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;two&quot;&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;document&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;three&quot;&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;document&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;four&quot;&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
.
.
.

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I needed a way to index all of these into my node Elasticsearch node. I knew Elasticsearch offered a basic &lt;code class=&quot;highlighter-rouge&quot;&gt;Index API&lt;/code&gt; which would solve my problem, but I’d have to send each document one by one.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# First document&lt;/span&gt;
curl -XPUT &lt;span class=&quot;s1&quot;&gt;'localhost:9200/index/type/1?pretty'&lt;/span&gt; -H &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; -d&lt;span class=&quot;s1&quot;&gt;'
{
&quot;document&quot;: &quot;one&quot;
&quot;title&quot;:{}
}
'&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Second document&lt;/span&gt;
curl -XPUT &lt;span class=&quot;s1&quot;&gt;'localhost:9200/index/type/1?pretty'&lt;/span&gt; -H &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; -d&lt;span class=&quot;s1&quot;&gt;'
{
&quot;document&quot;: &quot;two&quot;
&quot;title&quot;:{}
}
'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;I thought I’d put together a simple bash script that would run through my documents and &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; them to my ES node. But, I knew there had to be a better way. I had heard about the &lt;code class=&quot;highlighter-rouge&quot;&gt;Bulk API&lt;/code&gt; interface that ES offered but I hadn’t had a chance to use it - until now.&lt;/p&gt;

&lt;p&gt;After looking into the &lt;code class=&quot;highlighter-rouge&quot;&gt;Bulk API&lt;/code&gt; interface, I realized that it was actually pretty simple to use. I could simple use the command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -s -XPOST http://localhost:9200/_bulk --data-binary @bulkReady.json
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;But my &lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt; file needed to be in a special format! Every json document needed to have a some metadata associated with it. So I needed to massage my file into something like this:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;index&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;_index&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;_type&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;type1&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;_id&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Since I already knew the index and type of my documents, I could remove them from the metadata. I also wanted Elasticsearch to automatically assign an id. Thus, I needed a document looking like thus:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;index&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;document&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;one&quot;&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;index&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;document&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;two&quot;&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;index&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;document&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;three&quot;&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;index&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;document&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;four&quot;&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I was back to where I started. Damn, I was so close but now I’ll need to add some metadata to each document anyways so why not just use my initial approach of writing that bash script. That is when I discovered the substitution capability of &lt;code class=&quot;highlighter-rouge&quot;&gt;sed&lt;/code&gt;; an extremely powerful command line Stream EDitor.&lt;/p&gt;

&lt;h3 id=&quot;sed-substitution&quot;&gt;sed substitution&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c&quot;&gt;# sed processes each line of a file and applies some substitution if it matches a regex&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# the syntax is sed 's/regex/replacement/'&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# s - substitution&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# / are delimiters - you need three after s/a/b/ - replaces a with b&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;sunday | sed &lt;span class=&quot;s1&quot;&gt;'s/day/night/'&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# =&amp;gt; sunnight&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;Monday Sunday | sed &lt;span class=&quot;s1&quot;&gt;'s/day/night/'&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# =&amp;gt; Monnight Sunday - only processes first match&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;Monday Sunday | sed &lt;span class=&quot;s1&quot;&gt;'s/day/night/g'&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# =&amp;gt; Monnight Sunnight - a g parameter at the end tell sed to act globally&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is all I needed to solve my bulk format problem. I needed to add some metadata before every document. &lt;code class=&quot;highlighter-rouge&quot;&gt;^&lt;/code&gt; is regex for start of the line. I had some problems adding a new line because \n does not seem to work on my &lt;a href=&quot;http://sed.sourceforge.net/sedfaq4.html&quot;&gt;version&lt;/a&gt; of sed. I had to actually add a physical new line to get it to work.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sed &lt;span class=&quot;s1&quot;&gt;'s/^/{ &quot;index&quot; : {} }\
/'&lt;/span&gt; jsonFile &amp;gt; bulkReady.json
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Once I had my file in the correct format, one simple curl was all I needed:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -s -XPOST http://localhost:9200/index/type/_bulk --data-binary @bulkReady.json
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And that is how I was able to upload several thousand json docs in two lines. Makes me wonder how much more productive I’d be if had command of the command line!&lt;/p&gt;</content><author><name>Zeshan Anwar</name></author><summary type="html">Late one night I needed to shove several thousand json documents into my local Elasticsearch cluster. I was setting up a demo for work and why I had left the most demo-worthy part of it till the end, I don’t know. Nevertheless, I was able to accomplish that with just two lines of bash! Lets take a look here:</summary></entry><entry><title type="html">Comparator Confusion?</title><link href="http://localhost:4000/2017/09/05/comparator-confusion.html" rel="alternate" type="text/html" title="Comparator Confusion?" /><published>2017-09-05T00:00:15-05:00</published><updated>2017-09-05T00:00:15-05:00</updated><id>http://localhost:4000/2017/09/05/comparator-confusion</id><content type="html" xml:base="http://localhost:4000/2017/09/05/comparator-confusion.html">&lt;p&gt;The comparator compare method is bad design! There I said it. It is
non-intuitive and absurd. Unless I’m missing some really big insight here, I
don’t think I’m the only one confused.&lt;/p&gt;

&lt;p&gt;I searched the web for an explanation and could not find anything that satisfied my curiosity. I found pages and pages of example of how to use it - but nothing describing the mechanism behind it. Someone even posted an enticing &lt;a href=&quot;https://stackoverflow.com/questions/26107921/what-determines-ascending-or-descending-order-in-comparator-comparable-collect&quot;&gt;question&lt;/a&gt;; and sadly was given a less than ideal answer.&lt;/p&gt;

&lt;p&gt;Let me explain - here is a simple comparator implemented as a lambda function:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Comparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ascending&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Comparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;descending&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Can you see where the confusion lies? Why does the subtraction of &lt;code class=&quot;highlighter-rouge&quot;&gt;a - b&lt;/code&gt; result in a sort of ascending order?
&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; are simply parameters to the function; they don’t inherently provide any insight into what they are.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ascending&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// {1, 2, 4, 5, 9}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;descending&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// {9, 5, 4, 2, 1}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To add to the confusion, by simple swapping the subtraction, namely &lt;code class=&quot;highlighter-rouge&quot;&gt;b - a&lt;/code&gt;, we end up with a descending order.&lt;/p&gt;

&lt;p&gt;Weird right!&lt;/p&gt;

&lt;h3 id=&quot;breaking-it-down&quot;&gt;Breaking it down&lt;/h3&gt;

&lt;p&gt;The key to understanding this is understanding:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;How the return value of &lt;code class=&quot;highlighter-rouge&quot;&gt;compare&lt;/code&gt; affect final ordering?&lt;/li&gt;
  &lt;li&gt;Which order are the parameters passed into the compare method - namely what are &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The official &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/util/Comparator.html&quot;&gt;javadocs&lt;/a&gt; do a reasonable job explaining the first point but they fall short on explaining what &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; are.&lt;/p&gt;

&lt;p&gt;In short, if the &lt;code class=&quot;highlighter-rouge&quot;&gt;compare&lt;/code&gt; method returns a negative number, &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; will always precede &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; in the final sorted order. If, however, compare returns a positive number, &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; will always precede &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; in ordering. Let me repeat that for clarity: &lt;em&gt;the return value of the compare method determines the final sorted placement of the two parameters, &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; with respect to each other.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A thing to note is the &lt;code class=&quot;highlighter-rouge&quot;&gt;compare&lt;/code&gt; method does not know or care about what the words ascending or descending mean. All it wants to do is place two elements in some order. More precisely, it just wants to &lt;em&gt;pick&lt;/em&gt; one element over the other.&lt;/p&gt;

&lt;p&gt;Now we still don’t know why &lt;code class=&quot;highlighter-rouge&quot;&gt;a - b&lt;/code&gt; gives us ascending order; and &lt;code class=&quot;highlighter-rouge&quot;&gt;b - a&lt;/code&gt; gives us descending. To add to the confusion, the switching of parameters &lt;code class=&quot;highlighter-rouge&quot;&gt;a- b&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;b - a&lt;/code&gt; to reverse the sort, seems to imply that the order in which &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; are passed seems to affect final order. What we will discover shortly, however, is that this is &lt;strong&gt;not&lt;/strong&gt; the case.&lt;/p&gt;

&lt;h4 id=&quot;a-natural-order&quot;&gt;A natural order&lt;/h4&gt;

&lt;p&gt;Numbers have a natural order to them. 7 is bigger than 5. Likewise, 5 is less than 6. Subtract a bigger number from a smaller one and you end up with a positive value.&lt;/p&gt;

&lt;p&gt;Let me illustrate with some examples: &lt;code class=&quot;highlighter-rouge&quot;&gt;Notation (a, b) -&amp;gt; (a - b)&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a = 7, b = 3
compare(a, b) -&amp;gt; (a - b)
(7, 3) -&amp;gt; (7 - 3)
7 - 3 = 4
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;4 is a positive value meaning &lt;code class=&quot;highlighter-rouge&quot;&gt;3&lt;/code&gt; precedes &lt;code class=&quot;highlighter-rouge&quot;&gt;7&lt;/code&gt; in the final sorted order; or put in other words: &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; comes before &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s flip our parameters:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a = 3, b = 7
compare(a, b) -&amp;gt; (a - b)
(3, 7) -&amp;gt; (3 - 7)
3 - 7 = -4
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;-4 is a negative number, and thus &lt;code class=&quot;highlighter-rouge&quot;&gt;3&lt;/code&gt; will come before &lt;code class=&quot;highlighter-rouge&quot;&gt;7&lt;/code&gt; again. Put in other words: &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; comes before &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Both results give us ascending order; which is correct. What we have just realized is that the order we pass into the function does not matter. But then what happens if we switch the parameters &lt;code class=&quot;highlighter-rouge&quot;&gt;(b - a)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Lets try our first example again: &lt;code class=&quot;highlighter-rouge&quot;&gt;Notation (a, b) -&amp;gt; (b - a)&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a = 7, b = 3
compare(a, b) -&amp;gt; (b - a)
(7, 3) -&amp;gt; (3 - 7) =&amp;gt; negative value;`7` comes before `3`
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;-4 is a negative number so &lt;code class=&quot;highlighter-rouge&quot;&gt;7&lt;/code&gt; precedes &lt;code class=&quot;highlighter-rouge&quot;&gt;3&lt;/code&gt; in final order. But hold on, what just happened here. I thought we just concluded above that the order we passed the numbers into the comparator function didn’t matter.&lt;/p&gt;

&lt;p&gt;By swapping the input parameters &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;, we’ve flipped our choice and this reverses the sort order. If a negative result would’ve selected &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; the first time, now we’re gonna select &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Where before, &lt;code class=&quot;highlighter-rouge&quot;&gt;(a - b)&lt;/code&gt; returning a positive number the algorithm would pick b, &lt;code class=&quot;highlighter-rouge&quot;&gt;(b - a)&lt;/code&gt; will return a negative number and so it’ll select &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; this time. This works vice-versa.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;What we need to realize is that the &lt;code class=&quot;highlighter-rouge&quot;&gt;(b - a)&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;(a - b)&lt;/code&gt; part doesn’t really matter. What matters is the return value of the &lt;code class=&quot;highlighter-rouge&quot;&gt;compare&lt;/code&gt; method.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pick&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pick&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This means we can do all sorts of crazy stuff like this:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Comparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crazySort&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// pick a&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crazySort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// [1, 9, 2, 5, 4]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;summary&quot;&gt;Summary&lt;/h4&gt;

&lt;p&gt;To surmise, there are three things going on here:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The return functions &lt;code class=&quot;highlighter-rouge&quot;&gt;(a - b)&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;(b - a)&lt;/code&gt; don’t mean anything&lt;/li&gt;
  &lt;li&gt;The order in which &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; are passed do not matter.&lt;/li&gt;
  &lt;li&gt;The result of &lt;code class=&quot;highlighter-rouge&quot;&gt;compare(a, b)&lt;/code&gt; determines the final output&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The confusion lies when the programmer assigns some sort of importance to the parameters &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;, the order they are passed in, or the result of their values. Thinking of &lt;code class=&quot;highlighter-rouge&quot;&gt;compare(a,b)&lt;/code&gt; as a black box is a good strategy here.&lt;/p&gt;

&lt;p&gt;As is the case with all explanations, this only leads us down a path of more questions. For example, how do we sort objects that don’t have a natural order to them like numbers? Pushing further, what if the definition of inequality is not transitive - if a &amp;lt; b, b &amp;lt; c BUT a &amp;gt; c? What about if values approach Integer.MAX_VALUE and Integer.MIN_VALUE?&lt;/p&gt;

&lt;p&gt;These will be answered in future posts.&lt;/p&gt;

&lt;h2 id=&quot;misc&quot;&gt;Misc&lt;/h2&gt;

&lt;p&gt;In my research for this; I came across the sorting algorithm that Java uses for its sorting. It’s called &lt;a href=&quot;http://svn.python.org/projects/python/trunk/Objects/listsort.txt&quot;&gt;Tims Sort&lt;/a&gt; and is a hybridized form of Merge sort. Check it out, its pretty cool.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A stable, adaptive, iterative mergesort that requires far fewer than n lg(n) comparisons when running on partially sorted arrays - Tims Sort&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Zeshan Anwar</name></author><summary type="html">The comparator compare method is bad design! There I said it. It is non-intuitive and absurd. Unless I’m missing some really big insight here, I don’t think I’m the only one confused.</summary></entry><entry><title type="html">To know or not know</title><link href="http://localhost:4000/learning/productivity/growth/2017/08/23/gaps-in-knowledge.markdown,.html" rel="alternate" type="text/html" title="To know or not know" /><published>2017-08-23T22:02:00-05:00</published><updated>2017-08-23T22:02:00-05:00</updated><id>http://localhost:4000/learning/productivity/growth/2017/08/23/gaps-in-knowledge.markdown,</id><content type="html" xml:base="http://localhost:4000/learning/productivity/growth/2017/08/23/gaps-in-knowledge.markdown,.html">&lt;blockquote&gt;
  &lt;p&gt;He that knows not, and knows not that he knows not is a fool&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We all have weaknesses. The faster we acknowledge that, the better off we will
be. The breaks in our knowledge prevent us from doing things as efficiently as
possible.&lt;/p&gt;

&lt;p&gt;No one in the world understands every part of every system =&amp;gt; everyone has
holes. There are many reasons why we have holes in our knowledge base. Some of&lt;br /&gt;
us did not have a formal, 4 year education. Whatever the reason, it is
imperative that we plug them.&lt;/p&gt;

&lt;h3 id=&quot;knowledge-falls-into-four-levels&quot;&gt;Knowledge falls into four levels:&lt;/h3&gt;

&lt;h4 id=&quot;a-things-you-know-that-you-know&quot;&gt;A. Things you know that you know&lt;/h4&gt;
&lt;p&gt;Everything that you know well, and understand fits in here. This is where you have the right amount of confidence in your skills and know how to apply your skills to maximum benefit. This is where you want to be to maximize your potential.&lt;/p&gt;

&lt;h4 id=&quot;b-things-you-dont-know-that-you-know&quot;&gt;B. Things you don’t know that you know&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Humility&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Shy&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Underachiever&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Undervalued&lt;/code&gt; - This is a weird transient state that falls between &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;C&lt;/code&gt;. Some people never never move up from this state due to either a lack of confidence in their abilities or just a touch of the wrong kind of humility. Not where you want to be for the greatest utility.&lt;/p&gt;

&lt;h4 id=&quot;c-things-you-know-that-you-dont-know&quot;&gt;C. Things you know that you don’t know&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;In progress&lt;/code&gt; - This is a good place to list all your weaknesses when starting out.&lt;/p&gt;

&lt;h4 id=&quot;d-things-you-dont-know-that-you-dont-know&quot;&gt;D. Things you don’t know that you don’t know&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Arrogant&lt;/code&gt; - This is without a doubt the worst level to be in. You will want to minimize this in your domain of knowledge. Be very careful not to fall into this trap. There are many things you will never know;&lt;/p&gt;

&lt;p&gt;As you progress with your learning you’ll move up a category, sometimes even leaping all the way to &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt;. Often times, you’ll also drop down a level. This may seem counter-intuitive but has a very simple explanation: as you learn new material, you also start getting a grasp on all the parts that you didn’t know you didn’t know &lt;code class=&quot;highlighter-rouge&quot;&gt;D&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Imagine a computer science student who has just finished learning about control-flow statements in Java and falsely assumes they know everything about Java coding. He is then given a recursive tree-traversal problem to which he has no answer.&lt;/p&gt;

&lt;p&gt;On a much more personal note, back in first year, I attempted to answer a BST traversal question on an exam using only if statements; not a proud memory of mine. During the exam I was confused as to why I was given only a few lines of empty space for my answer when I needed about two pages.&lt;/p&gt;

&lt;p&gt;Another example is of Dynamic Programming. There exists a famous saying amongst CS students - when you think you’ve understood Dynamic Programming, thats when you know you haven’t.&lt;/p&gt;

&lt;h3 id=&quot;finding-your-gaps&quot;&gt;Finding your gaps&lt;/h3&gt;

&lt;h3 id=&quot;plugging-them&quot;&gt;Plugging them&lt;/h3&gt;</content><author><name>Zeshan Anwar</name></author><summary type="html">He that knows not, and knows not that he knows not is a fool</summary></entry><entry><title type="html">Learning Java 8</title><link href="http://localhost:4000/java/language/java8/2017/08/21/Java-8.html" rel="alternate" type="text/html" title="Learning Java 8" /><published>2017-08-21T10:02:21-05:00</published><updated>2017-08-21T10:02:21-05:00</updated><id>http://localhost:4000/java/language/java8/2017/08/21/Java-8</id><content type="html" xml:base="http://localhost:4000/java/language/java8/2017/08/21/Java-8.html">&lt;h2 id=&quot;java-8&quot;&gt;Java 8&lt;/h2&gt;

&lt;h3 id=&quot;lamdas&quot;&gt;Lamdas:&lt;/h3&gt;

&lt;p&gt;FileFilter is an interface with one function, accept. We can do this in two ways:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;New Class which implements interface&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JavaFileFilter&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FileFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;endsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.java&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ol&gt;
  &lt;li&gt;Anonymous Class&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;FileFilter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileFilter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FileFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;endsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.java&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/Users/zeshan.anwar/learning/FileFilterTest&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;javaFiles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;listFiles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The new way with Lamdas is:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FileFilter filter = (File file) -&amp;gt; file.getName().endsWith(&quot;.java&quot;);&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Several other examples:&lt;/p&gt;

&lt;p&gt;If more than one line of code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Runnable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;more&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Even multiple parameters:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Comparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;1-what-is-a-lambda-expression--functional-interface&quot;&gt;1. What is a Lambda expression? =&amp;gt; Functional interface;&lt;/h3&gt;

&lt;p&gt;an interface with only &lt;code class=&quot;highlighter-rouge&quot;&gt;one&lt;/code&gt; abstract method (until Java 7 you couldn’t put anything other than abstract methods in an interface)
Some examples:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Runnable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Comparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FileFilter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pathname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;All objects in Java extend the Object class; thus they don’t count as only one.
You can define functional interface like such @FunctionalInterface
This way, the compiler will check to see if it really is a functional interface (contains one abstract method only), and return an error if not.&lt;/p&gt;

&lt;h3 id=&quot;2-can-a-lambda-be-put-in-a-variable--yes&quot;&gt;2. Can a lambda be put in a variable? =&amp;gt; YES!&lt;/h3&gt;
&lt;p&gt;Example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Comparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Can be used everywhere a variable can; passed as a parameter, passed around etc.&lt;/p&gt;

&lt;h3 id=&quot;3-is-a-lambda-an-object-no-but-an-object-without-an-identity&quot;&gt;3. Is a Lambda an Object? No, but an object without an identity.&lt;/h3&gt;
&lt;p&gt;Anonymous class uses &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt;, thus that is an object. Not free; lots of overhead!
This overhead does not exist when using a Lambda expression since there is no new. Performance is much, much better. DO NOT CALL OBJECT METHODS ON A LAMDA. Think of Lambdas as piece of code.&lt;/p&gt;

&lt;h3 id=&quot;functional-interfaces-toolbox-new-package-in-java-8-43-total-interfaces&quot;&gt;Functional Interfaces Toolbox (new package in Java 8) 43 total interfaces&lt;/h3&gt;
&lt;h4 id=&quot;4-categories&quot;&gt;4 categories&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Supplier; single interface provides new object:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@FunctionalInterface&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Supplier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Consumer / Biconsumer&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@FunctionalInterface&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Consumer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@FunctionalInterface&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BiConsumer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;U&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Predicate / BiPredicate&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@FunctionalInterface&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Predicate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@FunctionalInterface&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BiPredicate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;U&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Function / BiFunction - takes a function, and return a new function&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@FunctionalInterface&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@FunctionalInterface&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;U&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;more-lamda-syntax&quot;&gt;More Lamda Syntax&lt;/h4&gt;
&lt;p&gt;You can omit types; ie&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Comparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;===&amp;gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Comparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Java 8 will infer those types from the abstract method in the interface.&lt;/p&gt;

&lt;h4 id=&quot;method-reference&quot;&gt;Method Reference&lt;/h4&gt;
&lt;p&gt;Consumer&lt;String&gt; c = s -&amp;gt; System.out.println(s);
Consumer&lt;String&gt; c = System.out::println;&lt;/String&gt;&lt;/String&gt;&lt;/p&gt;

&lt;p&gt;Comparator&lt;Integer&gt; c = (i1, i2) -&amp;gt; Integer.compare(i1, i2);
Comparator&lt;Integer&gt; c = (i1, i2) -&amp;gt; Integer::compare;&lt;/Integer&gt;&lt;/Integer&gt;&lt;/p&gt;

&lt;h4 id=&quot;how-can-we-use-all-these-tools-to-process-data&quot;&gt;How can we use all these tools to process data?&lt;/h4&gt;

&lt;p&gt;Where are our objects most of the time? =&amp;gt; Collection API (List, Set, Map)&lt;/p&gt;

&lt;p&gt;Can I process these data structures with lamdas? Yes :)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Normal Lambda&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...?&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//Method Reference Lambda&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...?&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can add code into the interface! This is revolutionary in Java; this gave rise to new patterns. We can also add static methods in interfaces.&lt;/p&gt;</content><author><name>Zeshan Anwar</name></author><summary type="html">Java 8</summary></entry><entry><title type="html">Soft Skills</title><link href="http://localhost:4000/books/productivity/growth/2017/08/17/soft-skills.html" rel="alternate" type="text/html" title="Soft Skills" /><published>2017-08-17T21:45:45-05:00</published><updated>2017-08-17T21:45:45-05:00</updated><id>http://localhost:4000/books/productivity/growth/2017/08/17/soft-skills</id><content type="html" xml:base="http://localhost:4000/books/productivity/growth/2017/08/17/soft-skills.html">&lt;p&gt;Coding is often the easiest, most enjoyable part of a developers day. The hard part is dealing with everything else. This is what we’re good at; where we thrive. Meetings are the bane of all developers. I know many developers who have stymied their natural progression to management so that they could continue coding.&lt;/p&gt;

&lt;p&gt;There is just something so appealing about sitting down and hacking away at a problem or laying out a solution that existed purely in your head. Taking those crazy ideas swimming in your head, and putting them into practice has a real kick to it. How many other professions can &lt;em&gt;profess&lt;/em&gt; the same? Very few!&lt;/p&gt;

&lt;p&gt;Imagine a Toyota engineer, Phil, has an incredible idea one night in the shower. The idea: lets design the hood of our cars to mimic the &lt;a href=&quot;https://www.vox.com/videos/2017/11/9/16628106/biomimicry-design-nature&quot;&gt;pointed beak of a Kingfisher&lt;/a&gt;. Phil believes that a more aerodynamic shape would reduce drag at high speeds. How difficult is it for Phil to take this crazy idea and see it through to production? What are the costs associated? How much resistance or push-back will they feel? How long would it take? Several months to several years indeed. Unless Phil was the CEO of Toyota, there is little hope his idea would even get traction.&lt;/p&gt;

&lt;p&gt;How about if an architect wants to change the concrete-mixture they poured into their 100-story building? As the British say - not bloody likely.&lt;/p&gt;

&lt;p&gt;Programmers don’t have this hindrance. I can do all this, and do it with minimum overhead. I don’t need anything but my brain and the internet; and my brain is optional. All kidding aside, programmers can put together a completely new setup, pull away the foundations of a project, push in a completely new paradigm in as little time as it takes to write lines of code.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://simpleprogrammer.com&quot;&gt;John Sonmez’s&lt;/a&gt; book, &lt;a href=&quot;https://www.amazon.com/Soft-Skills-software-developers-manual/dp/1617292397&quot;&gt;Soft Skills&lt;/a&gt;, outlines all the skills&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The software developer’s life manual&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Many of them are &lt;em&gt;common sense&lt;/em&gt; (whatever that means) but when has common sense truly been common.
I write this without hesitation; this is one of my most recommended books to everyone regardless of their technical ability. The chapters laid out in this book are worth their weight in gold - literally. (Add a nice popup quote here, If you were to take the weight of that many pages in gold and sell it, would you make that much more over your life? 1.8 pounds =&amp;gt; $32781.56)&lt;/p&gt;

&lt;p&gt;John organically splits the book into seven chapters; starting with career and ending with emotional intelligence.&lt;/p&gt;

&lt;p&gt;He lays out all the tools needed&lt;/p&gt;</content><author><name>Zeshan Anwar</name></author><summary type="html">Coding is often the easiest, most enjoyable part of a developers day. The hard part is dealing with everything else. This is what we’re good at; where we thrive. Meetings are the bane of all developers. I know many developers who have stymied their natural progression to management so that they could continue coding.</summary></entry></feed>